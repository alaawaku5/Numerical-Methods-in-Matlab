# Project 2 â€“ Numerical Methods for Nonlinear ODEs

This project extends the study of numerical methods for ODEs from linear problems (Project 1) to nonlinear problems.  
The main focus is on fixed-point iteration, Newtonâ€™s method, implicit solvers for nonlinear ODEs, and adaptive step-size control.  
All implementations are written in MATLAB.

---

## ðŸ“Œ Project Components

### Fixed-Point Iteration
- **File:** `sciprog_b21.m`  
- Implemented a general fixed-point solver `[z, zvec] = fixedpoint(G, z0)` for contractions G: R^d â†’ R^d.  
- Used absolute error tolerance Ï„abs = 1e-12 and maximum iterations Jmax = 1000.  
- Returned the final iterate and the sequence of iterates in zvec.  
- Verified linear convergence in test cases.

---

### Fixed-Point Test Problem
- **File:** `sciprog_b22.m`  
- Applied fixed-point iteration to the scalar contraction  
  G(z) = exp(-Î±|z|),  with Î± âˆˆ (0,1), initial guess z0=100.  
- Observed convergence to the unique fixed point zâ‹† satisfying G(zâ‹†)=zâ‹†.  
- Demonstrated the effect of contraction mapping properties on convergence.

---

### One-Step Methods for Nonlinear ODEs
- **File:** `sciprog_b23.m`  
- Implemented three solvers for nonlinear ODEs y' = f(t,y):  
  1. **Explicit Euler** â†’ direct update rule.  
  2. **Implicit Euler** â†’ solved fixed-point equation z = yj + h f(tj+1, z) using `fixedpoint`.  
     - Returned also the iteration counts per step.  
  3. **Implicit Midpoint** â†’ solved nonlinear equation  
     z = yj + h f((tj+1+tj)/2, (yj+z)/2).  
- Each solver returns the discrete trajectory matrix y(:,â„“) plus, for implicit methods, iteration counts.

---

### Logistic Growth Model
- **File:** `sciprog_b24.m`  
- Considered the nonlinear logistic ODE:  
  y'(t) = k y(t)(C - y(t)),  with k=1, C=1, y0=0.5.  
- Exact solution: y(t) = 1 / (1 + (y0^{-1}-1)exp(-t)).  
- Applied Explicit Euler, Implicit Euler, and Implicit Midpoint on t âˆˆ [0,5].  
- Produced:  
  - Plot of exact vs numerical solutions.  
  - Plot of number of fixed-point iterations for implicit solvers.  
  - Error plots e_h vs h in logâ€“log scale, confirming order of convergence.

---

### Newtonâ€™s Method for Nonlinear Systems
- **File:** `sciprog_b25.m`  
- Implemented Newton solver `[z, zvec] = newton(F, DF, z0)` with stopping criterion âˆ¥z_{k+1}-z_kâˆ¥ â‰¤ Ï„abs.  
- Verified quadratic convergence on test functions.  

---

### Newton Test Problems
- **File:** `sciprog_b26.m`  
- Tested Newtonâ€™s method on scalar nonlinear equations:  
  1. F(z)=z^2+exp(z)-2 â†’ root â‰ˆ 0.5373.  
  2. F(z)=log(z)+z^2 â†’ root â‰ˆ 0.6529.  
  3. F(z)=(cos(2z))^2 - z^2 â†’ root â‰ˆ 0.5149.  
- Initial guesses chosen in [0.25,10].  
- Plotted convergence orders q_k across iterations.  
- Observed quadratic convergence in successful runs.

---

### Lotkaâ€“Volterra Predator-Prey System
- **File:** `sciprog_b27.m`  
- Considered nonlinear system:  
  y1' = y1(1-y2),  
  y2' = -y2(1-y1),  
  with y(0) = (1,0.5).  
- Solved with Explicit Euler, Implicit Euler, and Implicit Midpoint up to T=15.  
- Compared:  
  - Fixed-point vs Newton iteration for implicit schemes (files `implicitEulerNewton`, `implicitMidpointNewton`).  
  - Plotted number of iterations per time step.  
- Showed Newton requires fewer iterations for convergence compared to fixed-point.

---

### Adaptive Time-Stepping (hâ€“h/2 Strategy)
- **File:** `sciprog_b28.m`  
- Implemented function `[y, t] = adaptiveTimeStepping(solveODE, t0, T, f, y0, h0, tau)`.  
- Used the hâ€“(h/2) strategy:  
  - Compute y_h with step h, y_h/2 with two half steps.  
  - Compare Îµ = âˆ¥y_h - y_h/2âˆ¥âˆž with tolerance Ï„ h.  
  - Adapt step size accordingly (halve, keep, or double).  
- Ensured efficient step-size control while meeting accuracy requirements.

---

### Adaptive vs Uniform Stepping on Linear Oscillator
- **File:** `sciprog_b29.m`  
- Revisited the harmonic oscillator system from Project 1:  
  y1' = -y2, y2' = y1, with y(0) = (1,0).  
- Compared Explicit Euler with:  
  - Uniform mesh refinement (h=2^-n).  
  - Adaptive refinement (tolerance Ï„=2^-n, initial step size h0=5).  
- Plotted error at final time e_N = |y(2Ï€)-y_N| vs number of steps N in logâ€“log scale.  
- Observed convergence rate e_N = O(N^-Î±) and demonstrated efficiency of adaptive stepping.

---

## ðŸ“Š Key Outcomes
- Verified linear convergence of fixed-point iteration and quadratic convergence of Newtonâ€™s method.  
- Applied implicit solvers with nonlinear iteration to logistic growth and predator-prey systems.  
- Demonstrated efficiency gains of Newtonâ€™s method over fixed-point in nonlinear ODE solvers.  
- Implemented adaptive time stepping and showed it achieves target accuracy with fewer steps compared to uniform grids.  

---

## ðŸ“‚ File Index
- `sciprog_b21.m` â†’ Fixed-point solver  
- `sciprog_b22.m` â†’ Fixed-point test problem  
- `sciprog_b23.m` â†’ Explicit/Implicit Euler and Midpoint solvers (nonlinear ODEs)  
- `sciprog_b24.m` â†’ Logistic growth model study  
- `sciprog_b25.m` â†’ Newtonâ€™s method implementation  
- `sciprog_b26.m` â†’ Newton test problems with convergence plots  
- `sciprog_b27.m` â†’ Lotkaâ€“Volterra predator-prey system (fixed-point vs Newton)  
- `sciprog_b28.m` â†’ Adaptive time-stepping function (hâ€“h/2 strategy)  
- `sciprog_b29.m` â†’ Adaptive vs uniform stepping on harmonic oscillator  
